pub type mynode { pub constructors empty | mynode(data:int, next:_) }


pub def printMyNode(nd:_) use !io {
  if { nd = mynode(?data, ?next) ::
          !println(data)
          !printMyNode(next)
  }
}

# reverse linked list and return the new head
pub def foo(head:_, ?result1:_) {
    do {
        while head^next ~= empty
            foo(head^next, ?result1)
            next(!result1, head^next)
    }
}

?n3 = mynode(3, empty)
?n2 = mynode(2, n3)
?n1 = mynode(1, n2)
!printMyNode(n1)
