======================================================================
AFTER TYPE CHECK:
 Module append
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use wybe
  resources       : 
  procs           : 

append > (0 calls)
0: append(x:wybe.list(T) @append:1:12, y:wybe.list(T) @append:1:22, ?#result:wybe.list(T) @append:1:1):
    if {{test} wybe.list.<0>empty(x:wybe.list(T) @append:2:16)::

        foreign llvm move(y:wybe.list(T) @append:2:22, ?tmp#0:wybe.list(T))
    else::
        {test} wybe.list.<0>head(x:wybe.list(T) @append:3:24, ?tmp#2:T @append:3:19)
        {test} wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36)
        append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
        wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
        foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))

    }
   condition -> {x::wybe.list(T), y::wybe.list(T)}
   then&else -> {tmp#0::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
    foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)

LLVM code       : None

[1mUnbranch: [0m** Unbranching proc append:
[1mUnbranch: [0mappend > (0 calls)
[1mUnbranch: [0m0: append(x:wybe.list(T) @append:1:12, y:wybe.list(T) @append:1:22, ?#result:wybe.list(T) @append:1:1):
[1mUnbranch: [0m    if {{test} wybe.list.<0>empty(x:wybe.list(T) @append:2:16)::
[1mUnbranch: [0m
[1mUnbranch: [0m        foreign llvm move(y:wybe.list(T) @append:2:22, ?tmp#0:wybe.list(T))
[1mUnbranch: [0m    else::
[1mUnbranch: [0m        {test} wybe.list.<0>head(x:wybe.list(T) @append:3:24, ?tmp#2:T @append:3:19)
[1mUnbranch: [0m        {test} wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36)
[1mUnbranch: [0m        append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mUnbranch: [0m        wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mUnbranch: [0m        foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mUnbranch: [0m
[1mUnbranch: [0m    }
[1mUnbranch: [0m   condition -> {x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   then&else -> {tmp#0::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   resources -> {}
[1mUnbranch: [0m    foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0m** Unbranching with output params:[?#result:wybe.list(T) @append:1:1]
[1mUnbranch: [0m** Unbranching with output args:[?#result:wybe.list(T) @append:1:1]
[1mUnbranch: [0munbranching Det stmt
[1mUnbranch: [0m    if {{test} wybe.list.<0>empty(x:wybe.list(T) @append:2:16)::
[1mUnbranch: [0m
[1mUnbranch: [0m        foreign llvm move(y:wybe.list(T) @append:2:22, ?tmp#0:wybe.list(T))
[1mUnbranch: [0m    else::
[1mUnbranch: [0m        {test} wybe.list.<0>head(x:wybe.list(T) @append:3:24, ?tmp#2:T @append:3:19)
[1mUnbranch: [0m        {test} wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36)
[1mUnbranch: [0m        append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mUnbranch: [0m        wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mUnbranch: [0m        foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mUnbranch: [0m
[1mUnbranch: [0m    }
[1mUnbranch: [0m   condition -> {x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   then&else -> {tmp#0::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   resources -> {}
[1mUnbranch: [0m  with vars {x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0mMaybe factor Det continuation: 
[1mUnbranch: [0m    foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0m  with brVars: {tmp#0::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0munbranching Det stmt
[1mUnbranch: [0m    foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0m  with vars {tmp#0::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0mUnbranching foreign call foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0mLeaving stmt as is: foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0mUnbranching an empty Det body
[1mUnbranch: [0munbranching Det stmt
[1mUnbranch: [0m    foreign llvm move(y:wybe.list(T) @append:2:22, ?tmp#0:wybe.list(T))
[1mUnbranch: [0m  with vars {x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0mUnbranching foreign call foreign llvm move(y:wybe.list(T) @append:2:22, ?tmp#0:wybe.list(T))
[1mUnbranch: [0mLeaving stmt as is: foreign llvm move(y:wybe.list(T) @append:2:22, ?tmp#0:wybe.list(T))
[1mUnbranch: [0munbranching Det stmt
[1mUnbranch: [0m    foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0m  with vars {tmp#0::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0mUnbranching foreign call foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0mLeaving stmt as is: foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0mUnbranching an empty Det body
[1mUnbranch: [0munbranching Det stmt
[1mUnbranch: [0m    {test} wybe.list.<0>head(x:wybe.list(T) @append:3:24, ?tmp#2:T @append:3:19)
[1mUnbranch: [0m  with vars {x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0mconverting SemiDet proc call{{test} wybe.list.<0>head(x:wybe.list(T) @append:3:24, ?tmp#2:T @append:3:19)}
[1mUnbranch: [0munbranching SemiDet stmt
[1mUnbranch: [0m    {test} wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36)
[1mUnbranch: [0m  with vars {#success::wybe.bool, tmp#2::T, x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0mconverting SemiDet proc call{{test} wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36)}
[1mUnbranch: [0munbranching SemiDet stmt
[1mUnbranch: [0m    append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mUnbranch: [0m  with vars {#success::wybe.bool, tmp#2::T, tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0mUnbranching call append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mUnbranch: [0mLeaving stmt as is: append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mUnbranch: [0munbranching SemiDet stmt
[1mUnbranch: [0m    wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mUnbranch: [0m  with vars {#success::wybe.bool, tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0mUnbranching call wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mUnbranch: [0mLeaving stmt as is: wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mUnbranch: [0munbranching SemiDet stmt
[1mUnbranch: [0m    foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mUnbranch: [0m  with vars {#success::wybe.bool, tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0mUnbranching foreign call foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mUnbranch: [0mLeaving stmt as is: foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mUnbranch: [0munbranching SemiDet stmt
[1mUnbranch: [0m    foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0m  with vars {#success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0mUnbranching foreign call foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0mLeaving stmt as is: foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0mUnbranching an empty SemiDet body
[1mUnbranch: [0mmkCond True #success:wybe.bool
[1mUnbranch: [0m    append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mUnbranch: [0m    wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mUnbranch: [0m    foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mUnbranch: [0m    foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0melse
[1mUnbranch: [0m#Converted SemiDet proc call{{test} wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36)}
[1mUnbranch: [0m#To: 
[1mUnbranch: [0m    wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36, ?#success:wybe.bool)
[1mUnbranch: [0m    if {testbool #success:wybe.bool::
[1mUnbranch: [0m
[1mUnbranch: [0m        append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mUnbranch: [0m        wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mUnbranch: [0m        foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mUnbranch: [0m        foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0m    else::
[1mUnbranch: [0m
[1mUnbranch: [0m    }
[1mUnbranch: [0m   condition -> {#success::wybe.bool, tmp#2::T, tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   resources -> {}
[1mUnbranch: [0mmkCond True #success:wybe.bool
[1mUnbranch: [0m    wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36, ?#success:wybe.bool)
[1mUnbranch: [0m    if {testbool #success:wybe.bool::
[1mUnbranch: [0m
[1mUnbranch: [0m        append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mUnbranch: [0m        wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mUnbranch: [0m        foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mUnbranch: [0m        foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0m    else::
[1mUnbranch: [0m
[1mUnbranch: [0m    }
[1mUnbranch: [0m   condition -> {#success::wybe.bool, tmp#2::T, tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   resources -> {}
[1mUnbranch: [0melse
[1mUnbranch: [0m#Converted SemiDet proc call{{test} wybe.list.<0>head(x:wybe.list(T) @append:3:24, ?tmp#2:T @append:3:19)}
[1mUnbranch: [0m#To: 
[1mUnbranch: [0m    wybe.list.<0>head(x:wybe.list(T) @append:3:24, ?tmp#2:T @append:3:19, ?#success:wybe.bool)
[1mUnbranch: [0m    if {testbool #success:wybe.bool::
[1mUnbranch: [0m
[1mUnbranch: [0m        wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36, ?#success:wybe.bool)
[1mUnbranch: [0m        if {testbool #success:wybe.bool::
[1mUnbranch: [0m
[1mUnbranch: [0m            append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mUnbranch: [0m            wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mUnbranch: [0m            foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mUnbranch: [0m            foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0m        else::
[1mUnbranch: [0m
[1mUnbranch: [0m        }
[1mUnbranch: [0m   condition -> {#success::wybe.bool, tmp#2::T, tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   resources -> {}
[1mUnbranch: [0m    else::
[1mUnbranch: [0m
[1mUnbranch: [0m    }
[1mUnbranch: [0m   condition -> {#success::wybe.bool, tmp#2::T, x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   resources -> {}
[1mUnbranch: [0mconverting SemiDet proc call{{test} wybe.list.<0>empty(x:wybe.list(T) @append:2:16)}
[1mUnbranch: [0munbranching SemiDet stmt
[1mUnbranch: [0m    foreign llvm move(y:wybe.list(T) @append:2:22, ?tmp#0:wybe.list(T))
[1mUnbranch: [0m  with vars {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0mUnbranching foreign call foreign llvm move(y:wybe.list(T) @append:2:22, ?tmp#0:wybe.list(T))
[1mUnbranch: [0mLeaving stmt as is: foreign llvm move(y:wybe.list(T) @append:2:22, ?tmp#0:wybe.list(T))
[1mUnbranch: [0munbranching SemiDet stmt
[1mUnbranch: [0m    foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0m  with vars {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0mUnbranching foreign call foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0mLeaving stmt as is: foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0mUnbranching an empty SemiDet body
[1mUnbranch: [0mmkCond True #success:wybe.bool
[1mUnbranch: [0m    foreign llvm move(y:wybe.list(T) @append:2:22, ?tmp#0:wybe.list(T))
[1mUnbranch: [0m    foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0melse
[1mUnbranch: [0m    wybe.list.<0>head(x:wybe.list(T) @append:3:24, ?tmp#2:T @append:3:19, ?#success:wybe.bool)
[1mUnbranch: [0m    if {testbool #success:wybe.bool::
[1mUnbranch: [0m
[1mUnbranch: [0m        wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36, ?#success:wybe.bool)
[1mUnbranch: [0m        if {testbool #success:wybe.bool::
[1mUnbranch: [0m
[1mUnbranch: [0m            append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mUnbranch: [0m            wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mUnbranch: [0m            foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mUnbranch: [0m            foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0m        else::
[1mUnbranch: [0m
[1mUnbranch: [0m        }
[1mUnbranch: [0m   condition -> {#success::wybe.bool, tmp#2::T, tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   resources -> {}
[1mUnbranch: [0m    else::
[1mUnbranch: [0m
[1mUnbranch: [0m    }
[1mUnbranch: [0m   condition -> {#success::wybe.bool, tmp#2::T, x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   resources -> {}
[1mUnbranch: [0m#Converted SemiDet proc call{{test} wybe.list.<0>empty(x:wybe.list(T) @append:2:16)}
[1mUnbranch: [0m#To: 
[1mUnbranch: [0m    wybe.list.<0>empty(x:wybe.list(T) @append:2:16, ?#success:wybe.bool)
[1mUnbranch: [0m    if {testbool #success:wybe.bool::
[1mUnbranch: [0m
[1mUnbranch: [0m        foreign llvm move(y:wybe.list(T) @append:2:22, ?tmp#0:wybe.list(T))
[1mUnbranch: [0m        foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0m    else::
[1mUnbranch: [0m        wybe.list.<0>head(x:wybe.list(T) @append:3:24, ?tmp#2:T @append:3:19, ?#success:wybe.bool)
[1mUnbranch: [0m        if {testbool #success:wybe.bool::
[1mUnbranch: [0m
[1mUnbranch: [0m            wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36, ?#success:wybe.bool)
[1mUnbranch: [0m            if {testbool #success:wybe.bool::
[1mUnbranch: [0m
[1mUnbranch: [0m                append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mUnbranch: [0m                wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mUnbranch: [0m                foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mUnbranch: [0m                foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0m            else::
[1mUnbranch: [0m
[1mUnbranch: [0m            }
[1mUnbranch: [0m   condition -> {#success::wybe.bool, tmp#2::T, tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   resources -> {}
[1mUnbranch: [0m        else::
[1mUnbranch: [0m
[1mUnbranch: [0m        }
[1mUnbranch: [0m   condition -> {#success::wybe.bool, tmp#2::T, x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   resources -> {}
[1mUnbranch: [0m
[1mUnbranch: [0m    }
[1mUnbranch: [0m   condition -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   resources -> {}
[1mUnbranch: [0m** Unbranched defn:
[1mUnbranch: [0mappend > (0 calls)
[1mUnbranch: [0m0: append(x:wybe.list(T) @append:1:12, y:wybe.list(T) @append:1:22, ?#result:wybe.list(T) @append:1:1):
[1mUnbranch: [0m    wybe.list.<0>empty(x:wybe.list(T) @append:2:16, ?#success:wybe.bool)
[1mUnbranch: [0m    if {testbool #success:wybe.bool::
[1mUnbranch: [0m
[1mUnbranch: [0m        foreign llvm move(y:wybe.list(T) @append:2:22, ?tmp#0:wybe.list(T))
[1mUnbranch: [0m        foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0m    else::
[1mUnbranch: [0m        wybe.list.<0>head(x:wybe.list(T) @append:3:24, ?tmp#2:T @append:3:19, ?#success:wybe.bool)
[1mUnbranch: [0m        if {testbool #success:wybe.bool::
[1mUnbranch: [0m
[1mUnbranch: [0m            wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36, ?#success:wybe.bool)
[1mUnbranch: [0m            if {testbool #success:wybe.bool::
[1mUnbranch: [0m
[1mUnbranch: [0m                append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mUnbranch: [0m                wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mUnbranch: [0m                foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mUnbranch: [0m                foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mUnbranch: [0m            else::
[1mUnbranch: [0m
[1mUnbranch: [0m            }
[1mUnbranch: [0m   condition -> {#success::wybe.bool, tmp#2::T, tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   resources -> {}
[1mUnbranch: [0m        else::
[1mUnbranch: [0m
[1mUnbranch: [0m        }
[1mUnbranch: [0m   condition -> {#success::wybe.bool, tmp#2::T, x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   resources -> {}
[1mUnbranch: [0m
[1mUnbranch: [0m    }
[1mUnbranch: [0m   condition -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mUnbranch: [0m   resources -> {}
[1mUnbranch: [0m================================================
======================================================================
AFTER UNBRANCHING:
 Module append
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use wybe
  resources       : 
  procs           : 

append > (0 calls)
0: append(x:wybe.list(T) @append:1:12, y:wybe.list(T) @append:1:22, ?#result:wybe.list(T) @append:1:1):
    wybe.list.<0>empty(x:wybe.list(T) @append:2:16, ?#success:wybe.bool)
    if {testbool #success:wybe.bool::

        foreign llvm move(y:wybe.list(T) @append:2:22, ?tmp#0:wybe.list(T))
        foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
    else::
        wybe.list.<0>head(x:wybe.list(T) @append:3:24, ?tmp#2:T @append:3:19, ?#success:wybe.bool)
        if {testbool #success:wybe.bool::

            wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36, ?#success:wybe.bool)
            if {testbool #success:wybe.bool::

                append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
                wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
                foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
                foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
            else::

            }
   condition -> {#success::wybe.bool, tmp#2::T, tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
   resources -> {}
        else::

        }
   condition -> {#success::wybe.bool, tmp#2::T, x::wybe.list(T), y::wybe.list(T)}
   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
   resources -> {}

    }
   condition -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
   resources -> {}

LLVM code       : None

[1mClause: [0m--------------
[1mClause: [0mCompiling proc append(x:wybe.list(T) @append:1:12, y:wybe.list(T) @append:1:22, ?#result:wybe.list(T) @append:1:1)
[1mClause: [0mFinish with numbering fromList [("x",0),("y",0)]
[1mClause: [0mCompiling body:
[1mClause: [0m    wybe.list.<0>empty(x:wybe.list(T) @append:2:16, ?#success:wybe.bool)
[1mClause: [0m    if {testbool #success:wybe.bool::
[1mClause: [0m
[1mClause: [0m        foreign llvm move(y:wybe.list(T) @append:2:22, ?tmp#0:wybe.list(T))
[1mClause: [0m        foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mClause: [0m    else::
[1mClause: [0m        wybe.list.<0>head(x:wybe.list(T) @append:3:24, ?tmp#2:T @append:3:19, ?#success:wybe.bool)
[1mClause: [0m        if {testbool #success:wybe.bool::
[1mClause: [0m
[1mClause: [0m            wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36, ?#success:wybe.bool)
[1mClause: [0m            if {testbool #success:wybe.bool::
[1mClause: [0m
[1mClause: [0m                append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mClause: [0m                wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mClause: [0m                foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mClause: [0m                foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mClause: [0m            else::
[1mClause: [0m
[1mClause: [0m            }
[1mClause: [0m   condition -> {#success::wybe.bool, tmp#2::T, tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mClause: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mClause: [0m   resources -> {}
[1mClause: [0m        else::
[1mClause: [0m
[1mClause: [0m        }
[1mClause: [0m   condition -> {#success::wybe.bool, tmp#2::T, x::wybe.list(T), y::wybe.list(T)}
[1mClause: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mClause: [0m   resources -> {}
[1mClause: [0m
[1mClause: [0m    }
[1mClause: [0m   condition -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mClause: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mClause: [0m   resources -> {}
[1mClause: [0mCompiling wybe.list.<0>empty(x:wybe.list(T) @append:2:16, ?#success:wybe.bool)
[1mClause: [0mCompiling call wybe.list.<0>empty(x:wybe.list(T) @append:2:16, ?#success:wybe.bool)
[1mClause: [0mCompiling expression x
[1mClause: [0mExpression compiled to [x##0:wybe.list(T)]
[1mClause: [0mCompiling expression ?#success
[1mClause: [0mExpression compiled to [?#success##0:wybe.bool]
[1mClause: [0mFinish with numbering fromList [("#success",0),("x",0),("y",0)]
[1mClause: [0mCompiled to wybe.list.empty<0>(x##0:wybe.list(T), ?#success##0:wybe.bool) #0
[1mClause: [0mconditional on #success new name = Just #success##0
[1mClause: [0mCompiling body:
[1mClause: [0m    foreign llvm move(y:wybe.list(T) @append:2:22, ?tmp#0:wybe.list(T))
[1mClause: [0m    foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mClause: [0mCompiling foreign llvm move(y:wybe.list(T) @append:2:22, ?tmp#0:wybe.list(T))
[1mClause: [0mCompiling expression y
[1mClause: [0mExpression compiled to [y##0:wybe.list(T)]
[1mClause: [0mCompiling expression ?tmp#0
[1mClause: [0mExpression compiled to [?tmp#0##0:wybe.list(T)]
[1mClause: [0mFinish with numbering fromList [("#success",0),("tmp#0",0),("x",0),("y",0)]
[1mClause: [0mCompiled to foreign llvm move(y##0:wybe.list(T), ?tmp#0##0:wybe.list(T))
[1mClause: [0mCompiling foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mClause: [0mCompiling expression tmp#0
[1mClause: [0mExpression compiled to [tmp#0##0:wybe.list(T)]
[1mClause: [0mCompiling expression ?#result
[1mClause: [0mExpression compiled to [?#result##0:wybe.list(T)]
[1mClause: [0mFinish with numbering fromList [("#result",0),("#success",0),("tmp#0",0),("x",0),("y",0)]
[1mClause: [0mCompiled to foreign llvm move(tmp#0##0:wybe.list(T), ?#result##0:wybe.list(T))
[1mClause: [0mClosing body with output parameters: [?#result:wybe.list(T)]
[1mClause: [0m  uninitialised outputs: []
[1mClause: [0mAdding ending instructions: 
[1mClause: [0m  vars after then: fromList [("#result",0),("#success",0),("tmp#0",0),("x",0),("y",0)]
[1mClause: [0mCompiling body:
[1mClause: [0m    wybe.list.<0>head(x:wybe.list(T) @append:3:24, ?tmp#2:T @append:3:19, ?#success:wybe.bool)
[1mClause: [0m    if {testbool #success:wybe.bool::
[1mClause: [0m
[1mClause: [0m        wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36, ?#success:wybe.bool)
[1mClause: [0m        if {testbool #success:wybe.bool::
[1mClause: [0m
[1mClause: [0m            append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mClause: [0m            wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mClause: [0m            foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mClause: [0m            foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mClause: [0m        else::
[1mClause: [0m
[1mClause: [0m        }
[1mClause: [0m   condition -> {#success::wybe.bool, tmp#2::T, tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mClause: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mClause: [0m   resources -> {}
[1mClause: [0m    else::
[1mClause: [0m
[1mClause: [0m    }
[1mClause: [0m   condition -> {#success::wybe.bool, tmp#2::T, x::wybe.list(T), y::wybe.list(T)}
[1mClause: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mClause: [0m   resources -> {}
[1mClause: [0mCompiling wybe.list.<0>head(x:wybe.list(T) @append:3:24, ?tmp#2:T @append:3:19, ?#success:wybe.bool)
[1mClause: [0mCompiling call wybe.list.<0>head(x:wybe.list(T) @append:3:24, ?tmp#2:T @append:3:19, ?#success:wybe.bool)
[1mClause: [0mCompiling expression x
[1mClause: [0mExpression compiled to [x##0:wybe.list(T)]
[1mClause: [0mCompiling expression ?tmp#2
[1mClause: [0mExpression compiled to [?tmp#2##0:T]
[1mClause: [0mCompiling expression ?#success
[1mClause: [0mExpression compiled to [?#success##1:wybe.bool]
[1mClause: [0mFinish with numbering fromList [("#success",1),("tmp#2",0),("x",0),("y",0)]
[1mClause: [0mCompiled to wybe.list.head<0>(x##0:wybe.list(T), ?tmp#2##0:T, ?#success##1:wybe.bool) #1
[1mClause: [0mconditional on #success new name = Just #success##1
[1mClause: [0mCompiling body:
[1mClause: [0m    wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36, ?#success:wybe.bool)
[1mClause: [0m    if {testbool #success:wybe.bool::
[1mClause: [0m
[1mClause: [0m        append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mClause: [0m        wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mClause: [0m        foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mClause: [0m        foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mClause: [0m    else::
[1mClause: [0m
[1mClause: [0m    }
[1mClause: [0m   condition -> {#success::wybe.bool, tmp#2::T, tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mClause: [0m   then&else -> {#result::wybe.list(T), #success::wybe.bool, tmp#0::wybe.list(T), tmp#1::wybe.list(T), tmp#2::T, tmp#3::wybe.list(T), tmp#4::wybe.list(T), x::wybe.list(T), y::wybe.list(T)}
[1mClause: [0m   resources -> {}
[1mClause: [0mCompiling wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36, ?#success:wybe.bool)
[1mClause: [0mCompiling call wybe.list.<0>tail(x:wybe.list(T) @append:3:41, ?tmp#4:wybe.list(T) @append:3:36, ?#success:wybe.bool)
[1mClause: [0mCompiling expression x
[1mClause: [0mExpression compiled to [x##0:wybe.list(T)]
[1mClause: [0mCompiling expression ?tmp#4
[1mClause: [0mExpression compiled to [?tmp#4##0:wybe.list(T)]
[1mClause: [0mCompiling expression ?#success
[1mClause: [0mExpression compiled to [?#success##2:wybe.bool]
[1mClause: [0mFinish with numbering fromList [("#success",2),("tmp#2",0),("tmp#4",0),("x",0),("y",0)]
[1mClause: [0mCompiled to wybe.list.tail<0>(x##0:wybe.list(T), ?tmp#4##0:wybe.list(T), ?#success##2:wybe.bool) #2
[1mClause: [0mconditional on #success new name = Just #success##2
[1mClause: [0mCompiling body:
[1mClause: [0m    append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mClause: [0m    wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mClause: [0m    foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mClause: [0m    foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mClause: [0mCompiling append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mClause: [0mCompiling call append.<0>append(tmp#4:wybe.list(T), y:wybe.list(T) @append:3:45, ?tmp#3:wybe.list(T) @append:3:29)
[1mClause: [0mCompiling expression tmp#4
[1mClause: [0mExpression compiled to [tmp#4##0:wybe.list(T)]
[1mClause: [0mCompiling expression y
[1mClause: [0mExpression compiled to [y##0:wybe.list(T)]
[1mClause: [0mCompiling expression ?tmp#3
[1mClause: [0mExpression compiled to [?tmp#3##0:wybe.list(T)]
[1mClause: [0mFinish with numbering fromList [("#success",2),("tmp#2",0),("tmp#3",0),("tmp#4",0),("x",0),("y",0)]
[1mClause: [0mCompiled to append.append<0>(tmp#4##0:wybe.list(T), y##0:wybe.list(T), ?tmp#3##0:wybe.list(T)) #3
[1mClause: [0mCompiling wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mClause: [0mCompiling call wybe.list.<0>[|](tmp#2:T, tmp#3:wybe.list(T), ?tmp#1:wybe.list(T) @append:3:18)
[1mClause: [0mCompiling expression tmp#2
[1mClause: [0mExpression compiled to [tmp#2##0:T]
[1mClause: [0mCompiling expression tmp#3
[1mClause: [0mExpression compiled to [tmp#3##0:wybe.list(T)]
[1mClause: [0mCompiling expression ?tmp#1
[1mClause: [0mExpression compiled to [?tmp#1##0:wybe.list(T)]
[1mClause: [0mFinish with numbering fromList [("#success",2),("tmp#1",0),("tmp#2",0),("tmp#3",0),("tmp#4",0),("x",0),("y",0)]
[1mClause: [0mCompiled to wybe.list.[|]<0>(tmp#2##0:T, tmp#3##0:wybe.list(T), ?tmp#1##0:wybe.list(T)) #4
[1mClause: [0mCompiling foreign llvm move(tmp#1:wybe.list(T), ?tmp#0:wybe.list(T))
[1mClause: [0mCompiling expression tmp#1
[1mClause: [0mExpression compiled to [tmp#1##0:wybe.list(T)]
[1mClause: [0mCompiling expression ?tmp#0
[1mClause: [0mExpression compiled to [?tmp#0##0:wybe.list(T)]
[1mClause: [0mFinish with numbering fromList [("#success",2),("tmp#0",0),("tmp#1",0),("tmp#2",0),("tmp#3",0),("tmp#4",0),("x",0),("y",0)]
[1mClause: [0mCompiled to foreign llvm move(tmp#1##0:wybe.list(T), ?tmp#0##0:wybe.list(T))
[1mClause: [0mCompiling foreign llvm move(tmp#0:wybe.list(T) @append:2:10, ?#result:wybe.list(T) @append:1:1)
[1mClause: [0mCompiling expression tmp#0
[1mClause: [0mExpression compiled to [tmp#0##0:wybe.list(T)]
[1mClause: [0mCompiling expression ?#result
[1mClause: [0mExpression compiled to [?#result##0:wybe.list(T)]
[1mClause: [0mFinish with numbering fromList [("#result",0),("#success",2),("tmp#0",0),("tmp#1",0),("tmp#2",0),("tmp#3",0),("tmp#4",0),("x",0),("y",0)]
[1mClause: [0mCompiled to foreign llvm move(tmp#0##0:wybe.list(T), ?#result##0:wybe.list(T))
[1mClause: [0mClosing body with output parameters: [?#result:wybe.list(T)]
[1mClause: [0m  uninitialised outputs: []
[1mClause: [0mAdding ending instructions: 
[1mClause: [0m  vars after then: fromList [("#result",0),("#success",2),("tmp#0",0),("tmp#1",0),("tmp#2",0),("tmp#3",0),("tmp#4",0),("x",0),("y",0)]
[1mClause: [0mCompiling empty body
[1mClause: [0mClosing body with output parameters: [?#result:wybe.list(T)]
[1mClause: [0m  uninitialised outputs: [?#result:wybe.list(T)]
[1mClause: [0mAdding ending instructions: 
[1mClause: [0m    foreign llvm move(undef:wybe.list(T), ?#result##0:wybe.list(T))
[1mClause: [0mCompiling empty body produced:
[1mClause: [0m    foreign llvm move(undef:wybe.list(T), ?#result##0:wybe.list(T))
[1mClause: [0m  vars after else: fromList [("#result",0),("#success",2),("tmp#2",0),("tmp#4",0),("x",0),("y",0)]
[1mClause: [0m  vars after ite: fromList [("#result",0),("#success",2),("tmp#2",0),("tmp#4",0),("x",0),("y",0)]
[1mClause: [0m  vars after then: fromList [("#result",0),("#success",2),("tmp#2",0),("tmp#4",0),("x",0),("y",0)]
[1mClause: [0mCompiling empty body
[1mClause: [0mClosing body with output parameters: [?#result:wybe.list(T)]
[1mClause: [0m  uninitialised outputs: [?#result:wybe.list(T)]
[1mClause: [0mAdding ending instructions: 
[1mClause: [0m    foreign llvm move(undef:wybe.list(T), ?#result##0:wybe.list(T))
[1mClause: [0mCompiling empty body produced:
[1mClause: [0m    foreign llvm move(undef:wybe.list(T), ?#result##0:wybe.list(T))
[1mClause: [0m  vars after else: fromList [("#result",0),("#success",1),("tmp#2",0),("x",0),("y",0)]
[1mClause: [0m  vars after ite: fromList [("#result",0),("#success",2),("tmp#2",0),("x",0),("y",0)]
[1mClause: [0m  vars after else: fromList [("#result",0),("#success",2),("tmp#2",0),("x",0),("y",0)]
[1mClause: [0m  vars after ite: fromList [("#result",0),("#success",2),("x",0),("y",0)]
[1mClause: [0mCompiled to  :
[1mClause: [0m    wybe.list.empty<0>(x##0:wybe.list(T), ?#success##0:wybe.bool) #0 @append:2:10
[1mClause: [0m    case #success##0:wybe.bool of
[1mClause: [0m    0:
[1mClause: [0m        wybe.list.head<0>(x##0:wybe.list(T), ?tmp#2##0:T, ?#success##1:wybe.bool) #1 @append:3:19
[1mClause: [0m        case #success##1:wybe.bool of
[1mClause: [0m        0:
[1mClause: [0m            foreign llvm move(undef:wybe.list(T), ?#result##0:wybe.list(T))
[1mClause: [0m
[1mClause: [0m        1:
[1mClause: [0m            wybe.list.tail<0>(x##0:wybe.list(T), ?tmp#4##0:wybe.list(T), ?#success##2:wybe.bool) #2 @append:3:36
[1mClause: [0m            case #success##2:wybe.bool of
[1mClause: [0m            0:
[1mClause: [0m                foreign llvm move(undef:wybe.list(T), ?#result##0:wybe.list(T))
[1mClause: [0m
[1mClause: [0m            1:
[1mClause: [0m                append.append<0>(tmp#4##0:wybe.list(T), y##0:wybe.list(T), ?tmp#3##0:wybe.list(T)) #3 @append:3:29
[1mClause: [0m                wybe.list.[|]<0>(tmp#2##0:T, tmp#3##0:wybe.list(T), ?tmp#1##0:wybe.list(T)) #4 @append:3:18
[1mClause: [0m                foreign llvm move(tmp#1##0:wybe.list(T), ?tmp#0##0:wybe.list(T)) @append:2:10
[1mClause: [0m                foreign llvm move(tmp#0##0:wybe.list(T), ?#result##0:wybe.list(T)) @append:1:1
[1mClause: [0m
[1mClause: [0m
[1mClause: [0m
[1mClause: [0m    1:
[1mClause: [0m        foreign llvm move(y##0:wybe.list(T), ?tmp#0##0:wybe.list(T)) @append:2:10
[1mClause: [0m        foreign llvm move(tmp#0##0:wybe.list(T), ?#result##0:wybe.list(T)) @append:1:1
[1mClause: [0m  startVars  : fromList [("x",0),("y",0)]
[1mClause: [0m  endVars    : fromList [("#result",0),("#success",2),("x",0),("y",0)]
[1mClause: [0m  params     : [x:wybe.list(T),y:wybe.list(T),?#result:wybe.list(T)]
[1mClause: [0m  comparams  : [x##0:wybe.list(T) <{}; {}; {0}>,y##0:wybe.list(T) <{}; {}; {1}>,?#result##0:wybe.list(T) <{}; {}; Everything>]
[1mClause: [0m  globalFlows: <{}; {}; {0, 1}>
======================================================================
AFTER COMPILATION TO LPVM:
 Module append
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use wybe
  resources       : 
  procs           : 

append > (1 calls)
0: append.append<0>
append(x##0:wybe.list(T) <{}; {}; {0}>, y##0:wybe.list(T) <{}; {}; {1}>, ?#result##0:wybe.list(T) <{}; {}; Everything>)<{}; {}; {0, 1}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.list.empty<0>(x##0:wybe.list(T), ?#success##0:wybe.bool) #0 @append:2:10
    case #success##0:wybe.bool of
    0:
        wybe.list.head<0>(x##0:wybe.list(T), ?tmp#2##0:T, ?#success##1:wybe.bool) #1 @append:3:19
        case #success##1:wybe.bool of
        0:
            foreign llvm move(undef:wybe.list(T), ?#result##0:wybe.list(T))

        1:
            wybe.list.tail<0>(x##0:wybe.list(T), ?tmp#4##0:wybe.list(T), ?#success##2:wybe.bool) #2 @append:3:36
            case #success##2:wybe.bool of
            0:
                foreign llvm move(undef:wybe.list(T), ?#result##0:wybe.list(T))

            1:
                append.append<0>(tmp#4##0:wybe.list(T), y##0:wybe.list(T), ?tmp#3##0:wybe.list(T)) #3 @append:3:29
                wybe.list.[|]<0>(tmp#2##0:T, tmp#3##0:wybe.list(T), ?tmp#1##0:wybe.list(T)) #4 @append:3:18
                foreign llvm move(tmp#1##0:wybe.list(T), ?tmp#0##0:wybe.list(T)) @append:2:10
                foreign llvm move(tmp#0##0:wybe.list(T), ?#result##0:wybe.list(T)) @append:1:1



    1:
        foreign llvm move(y##0:wybe.list(T), ?tmp#0##0:wybe.list(T)) @append:2:10
        foreign llvm move(tmp#0##0:wybe.list(T), ?#result##0:wybe.list(T)) @append:1:1


LLVM code       : None

======================================================================
AFTER EVERYTHING:
 Module append
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use wybe
  resources       : 
  procs           : 

append > (1 calls)
0: append.append<0>
append(x##0:wybe.list(T) <{}; {}; {0}>, y##0:wybe.list(T) <{}; {}; {1}>, outByReference #result##0:wybe.list(T) <{}; {}; {0, 1}>)<{}; {}; {}>:
  AliasPairs: [(#result##0,y##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(3,(append.append<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool)
    case ~tmp#6##0:wybe.bool of
    0:
        foreign llvm move(~y##0:wybe.list(T), ?#result##0:wybe.list(T)) @append:1:1

    1:
        foreign lpvm access(x##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#2##0:T) @list:9:28
        foreign lpvm access(~x##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.list(T)) @list:9:37
        foreign lpvm alloc(16:wybe.int, ?tmp#15##0:wybe.list(T)) @list:9:27
        foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#16##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:T) @list:9:27
        append.append<0>(~tmp#4##0:wybe.list(T), ~y##0:wybe.list(T), outByReference tmp#3##0:wybe.list(T)) #3 @append:3:29
        foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?#result##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:wybe.list(T)) @list:9:27


  LLVM code       :

; ModuleID = 'append'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"append.append<0>"(i64  %"x##0", i64  %"y##0", i64*  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"x##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"x##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"x##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 %2, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %8, i64* %"#result##0" 
  musttail call fastcc  void  @"append.append<0>"(i64  %5, i64  %"y##0", i64*  %11)  
  ret void 
if.else:
  store  i64 %"y##0", i64* %"#result##0" 
  ret void 
}
